
# Update the server file with port configuration
cat > server/index.ts << 'EOF'
import 'dotenv/config';
import express, { type Request, Response, NextFunsleep 3

# Update the server file with port configuration
cat > server/index.ts << 'EOF'
import 'dotenv/config';
import express, { type Request, Response, NextFunction } from "express";
import session from "express-session";
import { registerRoutes } from "Killed
root@srv786837:/home/creohub/htdocs/www.creohub.io# ./routes";
> import { setupVite, serveStatic, log } from "./vite";
>
> const app = express();
> app.use(express.json());
> app.use(express.urlencoded({ extended: false }));
>
> app.use(session({
>   secret: process.env.SESSION_SECRET || 'dev-secret-key',
>   resave: false,
>   saveUninitialized: false,
>   name: 'sessionId',
>   cookie: {
>     secure: false,
>     maxAge: 24 * 60 * 60 * 1000,
>     httpOnly: false,
>     sameSite: 'lax'
>   }
> }));
>
> app.use((req, res, next) => {
>   const start = Date.now();
>   const path = req.path;
>   let capturedJsonResponse: Record<string, any> | undefined = undefined;
>
>   const originalResJson = res.json;
>   res.json = function (bodyJson, ...args) {
>     capturedJsonResponse = bodyJson;
>     return originalResJson.apply(res, [bodyJson, ...args]);
>   };
>
>   res.on("finish", () => {
>     const duration = Date.now() - start;
>     if (path.startsWith("/api")) {
>       let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
>       if (capturedJsonResponse) {
>         logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
>       }
>       if (logLine.length > 80) {
>         logLine = logLine.slice(0, 79) + "â€¦";
>       }
>       log(logLine);
>     }
>   });
>
>   next();
> });
>
> (async () => {
>   const server = await registerRoutes(app);
>
>   app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
>     const status = err.status || err.statusCode || 500;
>     const message = err.message || "Internal Server Error";
>     res.status(status).json({ message });
>     throw err;
>   });
>
>   if (app.get("env") === "development") {
>     await setupVite(app, server);
>   } else {
>     serveStatic(app);
>   }
>
>   const port = parseInt(process.env.PORT || "5000", 10);
>   server.listen({
>     port,
>     host: "0.0.0.0",
>     reusePort: true,
>   }, () => {
>     log(`serving on port ${port}`);
>   });
> })();
> EOF
>
> # Rebuild the server with the port fix
> npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist
>
> # Start on port 8080
> PORT=8080 NODE_ENV=production node dist/index.js
>
>
>
>
>
>

