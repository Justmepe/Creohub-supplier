Node.js v20.19.2
root@srv786837:/home/creohub/htdocs/www.creohub.io# cat > server/routes.ts << 'EOF'
> import type { Express, Request, Response } from "express";
> import { createServer, type Server } from "http";
> import { storage } from "./storage";
> import { getSocialProofData } from "./services/socialProof";
> import multer from "multer";
> import path from "path";
> import fs from "fs";
> import express from "express";
>
> // Configure multer for file uploads
> const uploadDir = path.join(process.cwd(), "uploads");
> if (!fs.existsSync(uploadDir)) {
>   fs.mkdirSync(uploadDir, { recursive: true });
> }
>
> const upload = multer({
>   dest: uploadDir,
>   limits: { fileSize: 500 * 1024 * 1024 }, // 500MB
> });
>
> export async function registerRoutes(app: Express): Promise<Server> {
>
>   // Payment configuration (African focus)
>   app.get("/api/payments/config", async (req: Request, res: Response) => {
>     try {
>       res.json({
>         availablePaymentMethods: [
>           'pesapal',
>           'mpesa',
>           'bank_transfer'
>         ],
>         defaultCurrency: 'KES',
>         supportedCountries: ['KE', 'UG', 'TZ', 'RW', 'NG', 'GH', 'ZA']
>       });
>     } catch (error: any) {
>       res.status(500).json({ message: "Failed to fetch payment config" });
>     }
>   });
>
>   // Social proof system
>   app.get("/api/social-proof", async (req: Request, res: Response) => {
>     try {
>       const socialProofData = await getSocialProofData();
>       res.json({ data: socialProofData });
>     } catch (error: any) {
>       console.error("Social proof error:", error);
>       res.status(500).json({ message: "Failed to fetch social proof data" });
>     }
>   });
>
>   // Serve uploaded files
>   app.use("/uploads", express.static(uploadDir));
>
>   // Handle client-side routing
>   app.get("*", (req: Request, res: Response) => {
>     res.sendFile(path.join(process.cwd(), "server/public/index.html"));
>   });
>
>   const httpServer = createServer(app);
>   return httpServer;
> }

  dist/index.js  25.7kbeohub/htdocs/www.creohub.io# npx esbuild server/index.ts --platform=node --packages=external --bundle
 --format=esm --outdir=dist
âš¡ Done in 10msnode dist/index.js
root@srv786837:/home/creohub/htdocs/www.creohub.io# NODE_ENV=production node dist/index.js
Warning: connect.session() MemoryStore is not
designed for a production environment, as it will leak
memory, and will not scale past a single process.
node:events:502
      throw er; // Unhandled 'error' event
      ^

Error: listen EADDRINUSE: address already in use 0.0.0.0:5000
    at Server.setupListenHandle [as _listen2] (node:net:1908:16)
    at listenInCluster (node:net:1965:12)
    at doListen (node:net:2139:7)
    at process.processTicksAndRejections (node:internal/process/task_queues:83:21)
Emitted 'error' event on Server instance at:
    at emitErrorNT (node:net:1944:8)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  code: 'EADDRINUSE',
  errno: -98,
  syscall: 'listen',
  address: '0.0.0.0',
  port: 5000
}

Node.js v20.19.2
root@srv786837:/home/creohub/htdocs/www.creohub.io#